from flask import Flask, abort, jsonify, request, g
from pathlib import Path
from werkzeug.exceptions import HTTPException

from flask_sqlalchemy import SQLAlchemy
from sqlalchemy.orm import DeclarativeBase

from sqlalchemy.orm import Mapped, mapped_column
from sqlalchemy import String, func
from sqlalchemy.exc import SQLAlchemyError, InvalidRequestError
from flask_migrate import Migrate


class Base(DeclarativeBase):
    pass


BASE_DIR = Path(__file__).parent
path_to_db = BASE_DIR / "quotes.db"  # <- тут путь к БД

app = Flask(__name__)
app.json.ensure_ascii = False

app.config['SQLALCHEMY_DATABASE_URI'] = f"sqlite:///{path_to_db}"
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SQLALCHEMY_ECHO'] = False

db = SQLAlchemy(model_class=Base)
db.init_app(app)


class QuoteModel(db.Model):
    __tablename__ = 'quotes'

    id: Mapped[int] = mapped_column(primary_key=True)
    author: Mapped[str] = mapped_column(String(32))
    text: Mapped[str] = mapped_column(String(255))

    def __init__(self, author, text):
        self.author = author
        self.text  = text

    def __repr__(self):
        return f"Qoute {self.id, self.author}"
    
    def to_dict(self):
        return{
            "id": self.id,
            "author": self.author,
            "text": self.text
        }

# # ===============================
# #  Функци-заглушки
# query_db = get_db = lambda : ...
# # ===============================


def check(data: dict, check_rating=False) -> tuple[bool, dict]:
    keys = ('author', 'text')
    if check_rating:
        rating = data.get('rating')    
        if rating and rating not in range(1, 6):
            return False, {"error": "Rating must be between 1 and 5"}
    
    if set(data.keys()) - set(keys):
        return False, {"error": "Invalid fields to create/update"}
    return True, data


@app.errorhandler(HTTPException)
def handle_exception(e):
    """Функция для перехвата HTTP ошибок и возврата в виде JSON."""
    return jsonify({"error":str(e)}), e.code
         

@app.get("/quotes")
def get_quotes():
    """ Функция возвращает все цитаты из БД. """
    quotes_db = db.session.scalars(db.select(QuoteModel)).all()
    quotes = []
    for quote in quotes_db:
        quotes.append(quote.to_dict())
    return jsonify(quotes), 200


@app.get("/quotes/<int:quote_id>")
def get_quote_by_id(quote_id: int):
    """ Return quote by id from db."""
    quote = db.get_or_404(QuoteModel, quote_id, description=f"Quote with id={quote_id} not found")
    return jsonify(quote.to_dict()), 200


@app.get("/quotes/count")
def get_quotes_count() -> int:
    """ Return count of quotes in db."""
    count = db.session.scalar(func.count(QuoteModel.id))
    return jsonify(count=count), 200


@app.post("/quotes")
def create_quote():
    """ Function creates new quote and adds it to db."""
    data = request.json
    try:
        quote = QuoteModel(**data)
        db.session.add(quote)
        db.session.commit()
    except TypeError:
        return jsonify(error=f'Invalid data.Request: Author and text. Received: {', '.join(data.keys())}'), 400
    except Exception as e:
        abort(503, f'Database error: {str(e)}')
    
    return jsonify(quote.to_dict()), 400
    


@app.put("/quotes/<int:quote_id>")
def edit_quote(quote_id: int):
    """Update an existing quote"""
    new_data = request.json
    result = check(new_data, check_rating=True)
    if not result[0]:
        return abort(400, result[1].get('error'))
    
    quote = db.get_or_404(QuoteModel, quote_id, description=f"Quote with id={quote_id} not found")
    
    try:
        for key_as_attr, value in new_data.items():
            setattr(quote, key_as_attr, value)

        db.session.commit()
        return jsonify(quote.to_dict()),200
    except SQLAlchemyError as e:
        db.session.rollback()
        abort(503, f"error: {str(e)}")


@app.route("/quotes/<int:quote_id>", methods=['DELETE'])
def delete_quote(quote_id):
    """Delete quote by id """
    quote = db.get_or_404(QuoteModel, quote_id, description=f"Quote with id={quote_id} not found")
    db.session.delete(quote)
    try:
        db.session.commit()
        return jsonify({"message": f"Quote with id {quote_id} has deleted."}), 200
    except SQLAlchemyError as e:
        db.session.rollback()
        abort(503, f"error: {str(e)}")



@app.route("/quotes/filter", methods=['GET'])
def filter_quotes():
    data = request.args
    try:
        quotes = db.session.scalars(db.select(QuoteModel).filter_by(*data)).all()
    except InvalidRequestError:
        abort(400, f'Invalid data. Required: <author> and <text>')


if __name__ == "__main__":
    app.run(debug=True)